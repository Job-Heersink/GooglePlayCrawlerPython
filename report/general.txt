https://www.slant.co/versus/10237/10238/~google-play-crawler-java-api_vs_google-play-unofficial-python-api
https://www.segmentationfault.fr/publications/reversing-google-play-and-micro-protobuf-applications/
article on reversing protobuf: https://sysdream.com/news/lab/2012-06-06-reverse-engineering-of-protobuf-based-applications/

https://github.com/google/protobuf-gradle-plugin
https://github.com/protocolbuffers/protobuf

https://github.com/Akdeniz/google-play-crawler
https://github.com/yeriomin/play-store-api
https://github.com/HamidrezaMoradi/APK-Downloader

https://google.github.io/google-api-cpp-client/latest/guide/oauth2.html

https://developers.google.com/api-client-library/java/google-api-java-client/oauth2?hl=en_US
https://developers.google.com/oauthplayground/ <-- VERY USEFULL

actual recent file:
https://github.com/egbertbouman/APKfetch <-- this one has succesfull login, but cannot get the download url
https://github.com/NoMore201/googleplay-api

encountered issues when building:
oudated plugin used by maven: com.google.protobuf.tools. (fixed by updating the dependency to most recent version (was 2.5 is now 3.9)) and commenting out plugin.
fixed by manually compiling protobuf and creating java class files without the use of the plugin, because gradle was needed to make the plugin work.
succesfull Build after that!

encountered issues when running:
app is using the Android Cloud to Device Messaging ACDM for login (and probably for other things too) which has been deprecated since august 2012 and completely shut down after october 20, 2015.
Since the code is over 7 years old, this was bound to happen.
some things are implemented with the GCM which is newer, but apperently was announced deprecated on april 2018 and shut down may 2019.
I need to make a full conversion from GCM and ACDM to Firebase Cloud Messaging FCM.
so GooglePlayApi.java needs a complete overhaul.
tried logging in with my credentials, both my personal account and recently created temporary acount (credentials see below)
got a authentication error. closer look revealed that is was a 403 code. Which just means im not allowed to do anything.

I moved away from the Akdeniz crawler and looked for a more promessing Google play api in java. I saw the yeriomin API that was based on Akdeniz but was last updated a year ago (in contrast to Akdeniz, which has last been updated 7 years ago, this is good news!).
Building and testing went perfect, so i regained hope. But i saw this program still uses the old method of getting credentials, which didn't work with the last one as well, so i was sceptical about wheter it worked or not. But it passed its test so i didnt thinks much of it.
after 4 hours of trying to get a grip on the code i decided to test it with my account.
the same error from akdeniz reveiled itself.
Apperently yeriomin stored the output of requests on disk beforehand. So when the program was tested by Junit, it found the data on the disk first and just read that instead of making a life call to google play.
This showed that the code indeed used to work, but is no longer useable for life requests. So i was back to where i started.

I looked around for python googple play api's, but discovered they use the same method for getting the credentials. Which proved to be unsuccesfull.

I stubled upon a official google service API developed for C++. I learned about OAuth2, maybe this is promising. turned out to be deprecated as well.

Read about the Oauth2 authentication google uses. I need to select specific scopes to get the right permissions. not sure which scopes to use

found a python program that succesfully implemented authentication.
with a little modification (on the proto file and compiling) also able to get app details.
maybe even download app apk. we'll see.

just noticed that this python program does work! but only for apps that i have purchased before.

tried the purchase sequence that some api's in the past have implemented. Got an error: Your device is not compatible back. This should be an easy fix :)

it uses a Samsung Galaxy Gio GT-S5660 as a fake device. Just for reference The galaxy Gio was manufacured with android 2.2 and can support max 2.3. we are at android 9 now lol. This is not a problem if you've purchased the app via account already since google wont check if the device is compatible. with purchase it does.

google play api (that doesnt build) has a file with specifications for a Samsung Galaxy Tab S3 witch can run on 9. this should be recent enough to make it work.
still incompatible, found an app which shows all the detailed info of my SAMSUNG Galaxy A70, which is CAME with android 9 preinstalled. If this is not compatible i do not know what is.

Ive made it work by just including my android ID instead of requesting from google.

Ive got a list of permissions from you, but as you said, this includes actions as well. I found a list on the developer site of google: "https://developer.android.com/reference/android/Manifest.permission#constants_2" whitch is both up to date and more trustworthy than some file on github. i extracted the information and put it into a csv file by scraping the site.

I managed to get the formatting correct. There is one problem though. an app can have external permissions (not of the android.permission package but from their own package or a package like com.samsung.android.app.spage.permission or com.spotify.music.permission). ofcourse we wont be able to include ALL permissions like that into one file. so is this approach a good idea?

apps that went wrong com.kodarkooperativet.blackplayerex

after the program did what he had to do. i needed to figure out the timeouts in between the steps.
Running for 500 apps on my 20mb/s wifi did not give me a timeout. Only a few incomplete responses. Trying to get those responses again solved that problem.
But when i tried to run for 1000 apps on my parants 100mbps glass fiber internet connection i started to get my first timeouts, since the speed of the downloads now significantly increased.
First i noticed that after 300 apps, i got a server busy response when trying to get the download link. This server busy response would consisntently last for 20 minutes (tested 3 times). I concluded that this meant that i was requesting to much and was thus on a timeout. I made it so that the program would wait a maximum of 20 minutes. with 5 tests in between if the server is free or not. before proceeding to the next app. (the server busy error occurs for all apps. moving on to the next would not solve the problem.)
fixed android version a timeout in between did not help. around 300 apps the error kept occuring (tested for 1 and 4 seconds in between apps)
fixed category infomy internet 14 seconds parents 3 for snapchat.



login info
email: playstorecrawler00@gmail.com
ww: IAmAGooglePlayCrawler

paramaters
--user playstorecrawler00@gmail.com --passwd IAmAGooglePlayCrawler --androidid 3fe994589ed3f83d --package com.spotify.music
